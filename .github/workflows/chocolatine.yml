name: Chocolatine

on:
  push:
  pull_request:

env:
  MIRROR_URL: git@github.com:EpitechPGEPromo2029/B-DOP-200-STG-2-1-chocolatine-mathilde.lorentz.git
  EXECUTABLES: palindrome

jobs:
  skip_check:
    runs-on: ubuntu-latest
    outputs:
      skipped: ${{ steps.check_skip.outputs.skipped }}
    steps:
      - name: Check if workflow should be skipped
        id: check_skip
        run: |
          if [[ "${GITHUB_REF_NAME}" == ga-ignore-* ]] || [[ "${GITHUB_REPOSITORY}" == "$(basename $MIRROR_URL .git)" ]]; then
            echo "skipped=true" >> $GITHUB_OUTPUT
          else
            echo "skipped=false" >> $GITHUB_OUTPUT
          fi

  check_coding_style:
    needs: skip_check
    if: needs.skip_check.outputs.skipped != 'true'
    runs-on : ubuntu-latest
    container:
      image: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      - name: Run coding style checker
        run: check.sh $(pwd) $(pwd)

      - name: Annotate coding style errors
        run: |
          if [ -f coding-style-reports.log ]; then
            while IFS=: read -r file line type msg; do
              echo "::error file=$file,line=$line::$type - $msg"
              exit 1
            done < coding-style-reports.log
          fi


  check_program_compilation:
    needs: check_coding_style
    if: success()
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Compile project (timeout 2min)
        run: |
          make || { echo "La compilation a échoué. Vérifiez les erreurs de make."; exit 1; }
        timeout-minutes: 2
      - name: Run make clean
        run: make clean || true
      - name: Check executables exist
        run: |
          for exe in $(echo "$EXECUTABLES" | tr ',' ' '); do
            if [ ! -f "$exe" ]; then
              echo "::error file=$exe::File '$exe' does not exist."
              exit 1
            fi
            if [ ! -x "$exe" ]; then
              echo "::error file=$exe::File '$exe' is not executable."
              exit 1
            fi
          done

  run_tests:
    needs: check_program_compilation
    if: success()
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Set JSON_RESPONSE from curl
        id: set_json_response
        run: |
          echo "JSON_RESPONSE<<EOF" >> "$GITHUB_ENV"
          curl https://example.com >> "$GITHUB_ENV"
          echo "EOF" >> "$GITHUB_ENV"
      - name: Run unit tests (timeout 2min)
        run: make re
        timeout-minutes: 2

  push_to_mirror:
    needs: run_tests
    if: github.event_name == 'push' && success()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.GIT_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Push to mirror
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url: ${{ env.MIRROR_URL }}